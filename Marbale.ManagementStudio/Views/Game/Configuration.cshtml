@model MarbaleManagementStudio.Models.Configuration

@{
    ViewBag.Title = "Configuration";
    Layout = null;
}

<style>
    input.text-box{
        width:15vh;
    }
</style>
<div class="modal-header">
    <h4 class="modal-title">Configuration</h4>
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true" style="min-width: 10px !important;">&times;</button>
</div>
<div class="modal-body" style="width:900px;height:100px">
   
@using (Html.BeginForm("UpdateConfiguration", "Game", FormMethod.Post))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <div style="width: 800px;">
            <div style="width: 370px; float: left">
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.StartInPhysicalTicketMode)
                    @Html.EditorFor(model => model.StartInPhysicalTicketMode)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.NumberOfCoins)
                    @Html.EditorFor(model => model.NumberOfCoins)
                    @Html.ValidationMessageFor(model => model.NumberOfCoins)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.TicketPulseWidth) &nbsp;
                    @Html.EditorFor(model => model.TicketPulseWidth)
                    @Html.ValidationMessageFor(model => model.TicketPulseWidth)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.TicketPulseGap)
                    @Html.EditorFor(model => model.TicketPulseGap)
                    @Html.ValidationMessageFor(model => model.TicketPulseGap)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.ReverseDisplayDirection)
                    @Html.EditorFor(model => model.ReverseDisplayDirection)
                    @Html.ValidationMessageFor(model => model.ReverseDisplayDirection)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.DefaultTheme)
                    @Html.EditorFor(model => model.DefaultTheme)
                    @Html.ValidationMessageFor(model => model.DefaultTheme)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.StartScreenNumber)
                    @Html.EditorFor(model => model.StartScreenNumber)
                    @Html.ValidationMessageFor(model => model.StartScreenNumber)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.BalanceDelay)
                    @Html.EditorFor(model => model.BalanceDelay)
                    @Html.ValidationMessageFor(model => model.BalanceDelay)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.EnableResetPulse)
                    @Html.EditorFor(model => model.EnableResetPulse)
                    @Html.ValidationMessageFor(model => model.EnableResetPulse)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.MinSecondsBetweenRepeatPlay)
                    @Html.EditorFor(model => model.MinSecondsBetweenRepeatPlay)
                    @Html.ValidationMessageFor(model => model.MinSecondsBetweenRepeatPlay)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.EnableExtAntenna)
                    @Html.EditorFor(model => model.EnableExtAntenna)
                    @Html.ValidationMessageFor(model => model.EnableExtAntenna)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.OutOfServiceTheme)
                    @Html.EditorFor(model => model.OutOfServiceTheme)
                    @Html.ValidationMessageFor(model => model.OutOfServiceTheme)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.FreePlayTheme)
                    @Html.EditorFor(model => model.FreePlayTheme)
                    @Html.ValidationMessageFor(model => model.FreePlayTheme)
                </div>
                
            </div>
            <div style="width: 370px; float: left">
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.CoinPulseWidth)
                    @Html.EditorFor(model => model.CoinPulseWidth)
                    @Html.ValidationMessageFor(model => model.CoinPulseWidth)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.CoinPulseGap)
                    @Html.EditorFor(model => model.CoinPulseGap)
                    @Html.ValidationMessageFor(model => model.CoinPulseGap)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.SensorInterval)
                    @Html.EditorFor(model => model.SensorInterval)
                    @Html.ValidationMessageFor(model => model.SensorInterval)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.DisableTickets)
                    @Html.EditorFor(model => model.DisableTickets)
                    @Html.ValidationMessageFor(model => model.DisableTickets)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.CoinPusherMachine)
                    @Html.EditorFor(model => model.CoinPusherMachine)
                    @Html.ValidationMessageFor(model => model.CoinPusherMachine)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.DebugMode)
                    @Html.EditorFor(model => model.DebugMode)
                    @Html.ValidationMessageFor(model => model.DebugMode)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.CardRetries)
                    @Html.EditorFor(model => model.CardRetries)
                    @Html.ValidationMessageFor(model => model.CardRetries)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.DisplayLanguage)
                    @Html.EditorFor(model => model.DisplayLanguage)
                    @Html.ValidationMessageFor(model => model.DisplayLanguage)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.MaxTicketPerGamePlay)
                    @Html.EditorFor(model => model.MaxTicketPerGamePlay)
                    @Html.ValidationMessageFor(model => model.MaxTicketPerGamePlay)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.OutOfService)
                    @Html.EditorFor(model => model.OutOfService)
                    @Html.ValidationMessageFor(model => model.OutOfService)
                </div>
                <br />
                <div class="editor-label" style="display:inline-block">
                    @Html.LabelFor(model => model.GamePlayDuration)
                    @Html.EditorFor(model => model.GamePlayDuration)
                    @Html.ValidationMessageFor(model => model.GamePlayDuration)
                </div>
            </div>
            </div>
    </fieldset>
}
</div>
<div class="modal-footer">
    <button id="update" type="button" class="btn btn-primary" onclick="SaveConfiguration(this)">Save</button>
    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
</div>


<script>
    $(document).ready(function () {
        $('.modal-body').css({
            'width': '798px',
            'height': '500px',
            'overflow-y': 'scroll'
        });
    })
    function SaveConfiguration(btnClicked) {
        var $form = $(btnClicked).parents('form');
        $.ajax({
            type: "POST",
            url: $form.attr('action'),
            data: $form.serialize(),
            error: function (xhr, status, error) {
                //do something about the error
            },
            success: function (response) {
                //do something with response
                alert('Data saved');

            }
        });
        return false;// if it's a link to prevent post
    }
    var updatedArray = [];
    function UpdatedList(x) {
        if (!updatedArray.includes(x.rowIndex)) {
            updatedArray.push(x.rowIndex);
        }
    }
</script>
